Spring Security:
================
>> Spring security is all about authentication and authorization
 > athentication: (finding perticular user) who you are
 > authorization: access or roles or permissions
--------------------------------------------------------------
Dispatcher Servlets: One of the servlets that uses Handler mapping internally
	>requests are handled by DS
Handler Mapping: Interface b/w controller and front-end.
Refer for diagram: C:\Users\user\Downloads\2_spring_security_architecture.drawio

>> Before going to DS there are some filters present it will go through them
>> Tomcat - embeded server / internal server inside spring boot used for managing filters(from birth to death of servlet managed by tomcat)
>> DelegatingFilterProxy - one of the imp filters
>> Spring Initializer has one dependency called Spring Security - this should be used inside our project
 <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-test</artifactId>
      <scope>test</scope>
    </dependency>
 > using speing security we can authenticate in many ways:
	* using username and password
	* JWT(json Web Token) Token
	* OAuth2.O authentication -using github, google,facebook
Ex: When we log in any website, we can either login through username and password or login using google - OAuth2.O

>> By default spring security gives authentication with username and password.

1. For Rest API spring boot, spring security will provide HTTPBasicAuthentication filter.
2. For MVC, spring will provide formBasedAuthentication filter.
>> For both of the above methods it will use username and password.

IOC = Inversion of controller -- refer diagram
 >Spring security chain is managed by IOC
 >For changing the authentication type we use spring security chain
	Ex: username and password authentication to JWT authentication

Dispatcher Servlets >> DelegatingFilterProxy >> FilterChainProxy (checks for which authentication to apply and redirect to example:username and password) >> Controller
>> In each user filter there may be many filters present


>> When we use security dependency, when we run the page it will redirect to login page /login where we need to sign in through username and password
>> username is user by default and password is generated by spring and displayed inside console
>> every time we run the server, new password is generated 
>> to logout by default we have /logout
>> Servlet Filter Chain will handle the request by default if authentication is not used

>> Refer Spring Security 

>> Spring initializer >> add dependencies(1. Spring Web, 2. Thymeleaf, 3. Spring Boot Dev Tools, 4. Spring Security) >> Grnerate >> Extract files (from zip file)(These depencies are enough just to run html template[) >> Import (in eclipse) >> Create controller and html page >> Run localhost (It will redirect to login page which is created by spring security by default) >> password is generated in console username is by default: user >> to logout --> localhost8080/logout (it will show confirmation which is also created by spring security by default)

>> We can change the username and password in application properties:
  spring.security.user.name=sindhu
  spring.security.user.password=Sindhu1@ 
(spring-security6 dependency will allow use of some html tags which is provided by spring security itself)

>> For RestAPI we use @RestController instead of @Controller
>> Postman --> new --> workspace --> next --> create --> Add --> blank collection --> create request --> GET -- http://localhost:8080/ --> send 
before sending comment security and test security dependencies in pom.xml run the file and what is written in return it will consider as string and return it 

httpBasicAuthentication:
>> we can pass username and password in auth tab by selecting basic auth
>> headers we have to pass by:
"Basic username:password" -> in Base64 enode
browse base64 --> base64 enode and decode online --> select encode --> type in format - username:password --> encode --> code is generated --> in postman go to Authorization --> select 'No Auth' --> in headers -- key:Authorization and Value: Basic code_generated Ex: Basic c2luZGh1OlNpbmRodTFA --> send 
[sindhu:Sindhu1@ -> Basic (space after encode the code generated should be pasted)]


SecurityContext folder: holds 